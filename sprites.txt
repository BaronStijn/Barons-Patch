	#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Miyamoto! Level Editor - New Super Mario Bros. U Level Editor
# Copyright (C) 2009-2021 Treeki, Tempus, angelsl, JasonP27, Kinnay,
# MalStar1000, RoadrunnerWMC, MrRean, Grop, AboodXD, Gota7, John10v10,
# mrbengtsson

# This file is part of Miyamoto!.

# Miyamoto! is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Miyamoto! is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Miyamoto!.  If not, see <http://www.gnu.org/licenses/>.

# sprites.py
# Contains code to render NSMBU sprite images
# not even close to done...


# IMPORTANT!!!! An offset value of 16 is one block!


################################################################
################################################################

############ Imports ############

import math

from PyQt5 import QtCore, QtGui
from PyQt5.QtCore import *
from PyQt5.QtGui import *

Qt = QtCore.Qt

from miyamoto import *

import spritelib as SLib

#################################

ImageCache = SLib.ImageCache

# Global varible for rotations.
Rotations = [0, 0, 0]
StoneRotation = 0


################################################################
################################################################

# GETTING SPRITEDATA:
# You can get the spritedata that is set on a sprite to alter
# the image that is shown. To do this, add a datachanged method,
# with the parameter self. In this method, you can access the
# spritedata through self.parent.spritedata[n], which returns
# the (n+1)th byte of the spritedata. To find the n for nybble
# x, use this formula:
# n = (x/2) - 1
#
# If the nybble you want is the upper 4 bits of n (x is odd),
# you can get the value of x like this:
# val_x = n >> 4





    ################################################################


class SpriteImage_KoopaTroopa(SLib.SpriteImage_StaticMultiple):  # 19, 55
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

        self.xOffset = -4

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('KoopaShellG', 'koopatroopa_shell_green.png')
        SLib.loadIfNotInImageCache('KoopaShellR', 'koopatroopa_shell_red.png')
        SLib.loadIfNotInImageCache('KoopatroopaG', 'koopatroopa_green.png')
        SLib.loadIfNotInImageCache('KoopatroopaR', 'koopatroopa_red.png')
        SLib.loadIfNotInImageCache('KoopatroopaGR', 'koopatroopa_green_r.png')
        SLib.loadIfNotInImageCache('KoopatroopaRR', 'koopatroopa_red_r.png')

    def dataChanged(self):
        direction = (self.parent.spritedata[4] & 0xF) == 2
        shellcolour = self.parent.spritedata[5] & 1
        inshell = (self.parent.spritedata[5] >> 4) & 1

        if inshell:
            self.offset = (-4, 0)
            self.image = ImageCache['KoopaShellR' if shellcolour else 'KoopaShellG']
        elif direction:
            self.offset = (0, -16)
            self.image = ImageCache['KoopatroopaRR' if shellcolour else 'KoopatroopaGR']
        else:
            self.offset = (-4, -16)
            self.image = ImageCache['KoopatroopaR' if shellcolour else 'KoopatroopaG']

        super().dataChanged()


class SpriteImage_VLimitL(SLib.SpriteImage_StaticMultiple):  # 27
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('VLimitDl', 'vlimit_d_l.png')
        SLib.loadIfNotInImageCache('VLimitUL', 'vlimit_u_l.png')

    def dataChanged(self):

        direction = self.parent.spritedata[2]

        if direction == 0:
            self.dimensions = (0, 4, 0, 0)
            self.image = ImageCache['VLimitDl']
        elif direction == 16 or direction == 17 or direction == 18 or direction == 19 or direction == 20 or direction == 21 or direction == 22 or direction == 23 or direction == 24 or direction == 25 or direction == 26 or direction == 27 or direction == 28 or direction == 29 or direction == 30 or direction == 31:
            self.dimensions = (0, 0, 0, 0)
            self.image = ImageCache['VLimitUL']
        else:
            self.dimensions = (0, 4, 0, 0)
            self.image = ImageCache['VLimitDl']

        super().dataChanged()


class SpriteImage_VLimitR(SLib.SpriteImage_StaticMultiple):  # 28
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('VLimitDR', 'vlimit_d_r.png')
        SLib.loadIfNotInImageCache('VLimitUR', 'vlimit_u_r.png')

    def dataChanged(self):

        direction = self.parent.spritedata[2]

        if direction == 0:
            self.dimensions = (0, 4, 0, 0)
            self.image = ImageCache['VLimitDR']
        elif direction == 16 or direction == 17 or direction == 18 or direction == 19 or direction == 20 or direction == 21 or direction == 22 or direction == 23 or direction == 24 or direction == 25 or direction == 26 or direction == 27 or direction == 28 or direction == 29 or direction == 30 or direction == 31:
            self.dimensions = (0, 0, 0, 0)
            self.image = ImageCache['VLimitUR']
        else:
            self.dimensions = (0, 4, 0, 0)
            self.image = ImageCache['VLimitDR']

        super().dataChanged()


class SpriteImage_LimitU(SLib.SpriteImage_StaticMultiple):  # 29
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('LimitUR', 'limit_u_r.png')
        SLib.loadIfNotInImageCache('LimitUL', 'limit_u_l.png')

    def dataChanged(self):

        direction = self.parent.spritedata[2]

        if direction == 0:
            self.dimensions = (4, 0, 0, 0)
            self.image = ImageCache['LimitUR']
        elif direction == 16 or direction == 17 or direction == 18 or direction == 19 or direction == 20 or direction == 21 or direction == 22 or direction == 23 or direction == 24 or direction == 25 or direction == 26 or direction == 27 or direction == 28 or direction == 29 or direction == 30 or direction == 31:
            self.dimensions = (0, 0, 0, 0)
            self.image = ImageCache['LimitUL']
        else:
            self.dimensions = (4, 0, 0, 0)
            self.image = ImageCache['LimitUR']

        super().dataChanged()


class SpriteImage_LimitD(SLib.SpriteImage_StaticMultiple):  # 30
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('LimitDR', 'limit_d_r.png')
        SLib.loadIfNotInImageCache('LimitDL', 'limit_d_l.png')

    def dataChanged(self):

        direction = self.parent.spritedata[2]

        if direction == 0:
            self.dimensions = (4, 0, 0, 0)
            self.image = ImageCache['LimitDR']
        elif direction == 16 or direction == 17 or direction == 18 or direction == 19 or direction == 20 or direction == 21 or direction == 22 or direction == 23 or direction == 24 or direction == 25 or direction == 26 or direction == 27 or direction == 28 or direction == 29 or direction == 30 or direction == 31:
            self.dimensions = (0, 0, 0, 0)
            self.image = ImageCache['LimitDL']
        else:
            self.dimensions = (4, 0, 0, 0)
            self.image = ImageCache['LimitDR']

        super().dataChanged()


class SpriteImage_MovementStarCoin(SLib.SpriteImage_MovementControlled):  # 48
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

        self.previousType = 0
        self.yOffset = 8

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('StarCoin', 'star_coin.png')

    def getMovementType(self):
        return self.parent.spritedata[9] >> 4 & 3

    def allowedMovementControllers(self):
        if self.getMovementType() == 0:
            return 68, 116, 69, 118

        return tuple()

    def dataChanged(self):
        type = self.getMovementType()
        if type != self.previousType:
            self.previousType = type
            self.unhookController()

        if type == 0:
            self.offset = (-16, -10)

        else:
            self.offset = (0, 6)

        self.image = ImageCache['StarCoin']

        super().dataChanged()


class SpriteImage_Path(SLib.SpriteImage_StaticMultiple):  # 100
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
            ImageCache['Path'],
            (0, 0),
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('Path', 'path.png')


class SpriteImage_ControllerSwaying_Path(SLib.SpriteImage_MovementController):  # 116
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
            ImageCache['ControllerSwaying_Path'],
        )

        self.aux.append(SLib.AuxiliaryRotationAreaOutline(parent, 60))
        self.aux.append(SLib.AuxiliaryRotationAreaOutline(parent, 120))

        self.rotation = 0
        self.startOffset = 0
        self.arc = 0
        self.eventActivated = False

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('ControllerSwaying_Path', 'controller_swaying_path.png')

    def dataChanged(self):
        self.startOffset = (self.parent.spritedata[2] & 0xF) * 22.5 + 90
        self.eventActivated = (self.parent.spritedata[4] & 0x40) != 0
        reversedDir = ((self.parent.spritedata[4] >> 4) & 1) != 0
        self.arcMiddleRotation = (self.parent.spritedata[4] & 0xF) * 22.5
        self.delay = self.parent.spritedata[6] & 0xF0
        self.arc = (self.parent.spritedata[7] >> 4) * 22.5
        self.rotationSpeed = ((self.parent.spritedata[7] & 0xF) / 0x800) * 360

        if reversedDir:
            self.startOffset += 180
        
        self.rotation = math.cos(math.radians(self.startOffset))
            
        self.aux[0].SetAngle(90 + self.arcMiddleRotation - self.arc * 0.5, self.arc)
        self.aux[1].SetAngle(90 + self.arcMiddleRotation - self.rotation * self.arc * 0.5, 0)

        super().dataChanged()

    def active(self):
        return not self.eventActivated

    def getStartRotation(self):
        if not self.eventActivated:
            self.rotation = math.cos(math.radians(self.startOffset - SLib.RotationFrame * self.rotationSpeed * (60 / SLib.RotationFPS)))

        return -self.arcMiddleRotation + self.rotation * self.arc * 0.5


class SpriteImage_ControllerSpinning_Path(SLib.SpriteImage_MovementController):  # 118
    Speeds = [0x400000, 0x800000, 0xc00000, 0x1000000, 0x200000, 0x2000000, 0x4000000, 0x100000]

    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
            ImageCache['ControllerSpinning_Path'],
        )
        self.aux.append(SLib.AuxiliaryRotationAreaOutline(parent, 60))
        self.aux.append(SLib.AuxiliaryRotationAreaOutline(parent, 120))

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('ControllerSpinning_Path', 'controller_spinning_path.png')

    def dataChanged(self):
        self.rotation = (self.parent.spritedata[2] >> 4) * 22.5
        arc = (self.parent.spritedata[2] & 0xF) * 22.5
        self.spinMode = self.parent.spritedata[3] & 3
        reversedDir = ((self.parent.spritedata[4] >> 4) & 1) != 0
        speedValue = self.parent.spritedata[7] & 0xF

        if speedValue > 7:
            speedValue = 4

        self.rotationSpeed = (SpriteImage_ControllerSpinning_Path.Speeds[speedValue] / 0x100000000) * 360

        if reversedDir:
            self.rotation = -self.rotation
            self.rotationSpeed = -self.rotationSpeed

        if self.spinMode == 1:
            arc = 360

        self.aux[0].SetAngle(90 + self.rotation - (arc if reversedDir else 0), arc)
        self.aux[1].SetAngle(90 + self.rotation, 0)
        self.parent.updateScene()
        super().dataChanged()

    def active(self):
        return self.spinMode == 1

    def getStartRotation(self):
        if self.spinMode == 1:
            return -self.rotation - SLib.RotationFrame * self.rotationSpeed * (60 / SLib.RotationFPS)
        else:
            return -self.rotation
        

class SpriteImage_FallingIcicle(SLib.SpriteImage_StaticMultiple):  # 183
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

        self.yOffset = -4

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('FallingIcicle1', 'falling_icicle_1.png')
        SLib.loadIfNotInImageCache('FallingIcicle2', 'falling_icicle_2.png')

    def dataChanged(self):
        size = self.parent.spritedata[5]

        if size == 1:
            self.image = ImageCache['FallingIcicle2']
        else:
            self.image = ImageCache['FallingIcicle1']

        super().dataChanged()


class SpriteImage_BossController(SLib.SpriteImage_StaticMultiple):  # 216, 245, 412, 432, 435, 466, 497
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
            ImageCache['BossController'],
            (0, 0),
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('BossController', 'boss_controller.png')


class SpriteImage_Bush(SLib.SpriteImage_StaticMultiple):  # 288
    colors = (
        ('Green', 'green'),
        ('Yellow', 'yellow'),
    )

    offsets = (
        (-28, -32),
        (-36, -44),
        (-32, -60),
        (-40, -76),
    )

    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

        self.parent.setZValue(-60000)

    @staticmethod
    def loadImages():
        for C, c in SpriteImage_Bush.colors:
            for i in range(4):
                SLib.loadIfNotInImageCache('Bush%s%d' % (C, i), 'bush_%d_%s.png' % (i, c))

    def dataChanged(self):
        type = self.parent.spritedata[5] & 3
        isYellow = self.parent.spritedata[5] >> 4 & 1

        self.image = ImageCache['Bush%s%d' % (SpriteImage_Bush.colors[isYellow][0], type)]
        self.offset = SpriteImage_Bush.offsets[type]

        super().dataChanged()


class SpriteImage_GiantWiggler(SLib.SpriteImage_StaticMultiple):  # 301
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('GiantWiggler', 'giant_wiggler.png')
        SLib.loadIfNotInImageCache('GiantWigglerR', 'giant_wiggler_r.png')

    def dataChanged(self):
        direction = (self.parent.spritedata[5] >> 4)

        if direction == 1:
            self.offset = (-136, -72)
            self.image = ImageCache['GiantWigglerR']
        else:
            self.offset = (-32, -72)
            self.image = ImageCache['GiantWiggler']

        super().dataChanged()


class SpriteImage_DashCoin(SLib.SpriteImage_Static):  # 325
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
            ImageCache['DashCoin'],
            (0, 0),
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('DashCoin', 'outline.png')


class SpriteImage_LavaBlock(SLib.SpriteImage_StaticMultiple):  # 359
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

        self.parent.setZValue(-40000)

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('type_0', 'lavablock_0.png')
        SLib.loadIfNotInImageCache('type_1', 'lavablock_1.png')
        SLib.loadIfNotInImageCache('type_2', 'lavablock_2.png')
        SLib.loadIfNotInImageCache('type_3', 'lavablock_3.png')
        SLib.loadIfNotInImageCache('type_4', 'lavablock_4.png')
        SLib.loadIfNotInImageCache('type_5', 'lavablock_5.png')
        SLib.loadIfNotInImageCache('type_6', 'lavablock_6.png')
        SLib.loadIfNotInImageCache('type_7', 'lavablock_7.png')
        SLib.loadIfNotInImageCache('type_8', 'lavablock_8.png')
        SLib.loadIfNotInImageCache('type_9', 'lavablock_9.png')
        SLib.loadIfNotInImageCache('type_10', 'lavablock_10.png')
        SLib.loadIfNotInImageCache('type_11', 'crash.png')

    def dataChanged(self):
        type = self.parent.spritedata[4]

        if type == 1:
            self.image = ImageCache['type_1']
        elif type == 2:
            self.image = ImageCache['type_2']
        elif type == 3:
            self.image = ImageCache['type_3']
        elif type == 4:
            self.image = ImageCache['type_4']
        elif type == 5:
            self.image = ImageCache['type_5']
        elif type == 6:
            self.image = ImageCache['type_6']
        elif type == 7:
            self.image = ImageCache['type_7']
        elif type == 8:
            self.image = ImageCache['type_8']
        elif type == 9:
            self.image = ImageCache['type_9']
        elif type == 10:
            self.image = ImageCache['type_10']
        elif type == 11:
            self.image = ImageCache['type_11']
        elif type == 12:
            self.image = ImageCache['type_11']
        else:	
            self.image = ImageCache['type_0']

        super().dataChanged()


class SpriteImage_Debris(SLib.SpriteImage_StaticMultiple):  # 440
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75
        )

        self.aux.append(SLib.AuxiliaryImage(parent, 1, 1))

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('Debris_Small', 'debris_small.png')
        SLib.loadIfNotInImageCache('Debris_Big', 'debris_big.png')
        SLib.loadIfNotInImageCache('Debris_Both', 'debris_both.png')

    def dataChanged(self):
        type = (self.parent.spritedata[5] & 0xF)

        if type == 1:
            self.dimensions = (-32, -24, 64, 64)
            self.aux[0].setImage(ImageCache['Debris_Big'], -360, -420)
        elif type == 2:
            self.dimensions = (-32, -24, 64, 64)
            self.aux[0].setImage(ImageCache['Debris_Both'], -360, -420)
        else:
            self.dimensions = (-16, -8, 32, 32)
            self.aux[0].setImage(ImageCache['Debris_Small'], -180, -210)

        super().dataChanged()


class SpriteImage_KamekBlock(SLib.SpriteImage_StaticMultiple):  # 450
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
            ImageCache['KamekBlock'],
            (0, -32),
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('KamekBlock', 'kamek_block.png')


class SpriteImage_GiantKoopaTroopa(SLib.SpriteImage_StaticMultiple):  # 476
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('GiantKoopaShellG', 'giant_koopatroopa_shell_green.png')
        SLib.loadIfNotInImageCache('GiantKoopaShellR', 'giant_koopatroopa_shell_red.png')
        SLib.loadIfNotInImageCache('GiantKoopatroopaG', 'giant_koopatroopa_green.png')
        SLib.loadIfNotInImageCache('GiantKoopatroopaR', 'giant_koopatroopa_red.png')
        SLib.loadIfNotInImageCache('GiantKoopatroopaGR', 'giant_koopatroopa_green_r.png')
        SLib.loadIfNotInImageCache('GiantKoopatroopaRR', 'giant_koopatroopa_red_r.png')

    def dataChanged(self):
        direction = (self.parent.spritedata[4] & 0xF) == 2
        shellcolour = self.parent.spritedata[5] & 1
        inshell = (self.parent.spritedata[5] >> 4) & 1

        if inshell:
            self.offset = (-12, -16)
            self.image = ImageCache['GiantKoopaShellR' if shellcolour else 'GiantKoopaShellG']
        elif direction:
            self.offset = (-6, -40)
            self.image = ImageCache['GiantKoopatroopaRR' if shellcolour else 'GiantKoopatroopaGR']
        else:
            self.offset = (-24, -40)
            self.image = ImageCache['GiantKoopatroopaR' if shellcolour else 'GiantKoopatroopaG']

        super().dataChanged()


class SpriteImage_GoalRing(SLib.SpriteImage_StaticMultiple):  # 599
    def __init__(self, parent):
        super().__init__(
            parent,
            3.75,
            ImageCache['GoalRing'],
            (-16, -48),
        )

    @staticmethod
    def loadImages():
        SLib.loadIfNotInImageCache('GoalRing', 'goal_ring.png')


################## SPRITE CLASSES ##############################
################################################################

ImageClasses = {
    19: SpriteImage_KoopaTroopa,
    27: SpriteImage_VLimitL,
    28: SpriteImage_VLimitR,
    29: SpriteImage_LimitU,
    30: SpriteImage_LimitD,
    55: SpriteImage_KoopaTroopa,
    48: SpriteImage_MovementStarCoin,
    100: SpriteImage_Path,
    116: SpriteImage_ControllerSwaying_Path,
    118: SpriteImage_ControllerSpinning_Path,
    183: SpriteImage_FallingIcicle,
    216: SpriteImage_BossController,
    245: SpriteImage_BossController,
    288: SpriteImage_Bush,
    301: SpriteImage_GiantWiggler,
    325: SpriteImage_DashCoin,
    359: SpriteImage_LavaBlock,
    412: SpriteImage_BossController,
    432: SpriteImage_BossController,
    435: SpriteImage_BossController,
    440: SpriteImage_Debris,
    450: SpriteImage_KamekBlock,
    466: SpriteImage_BossController,
    476: SpriteImage_GiantKoopaTroopa,
    497: SpriteImage_BossController,
    599: SpriteImage_GoalRing,
}